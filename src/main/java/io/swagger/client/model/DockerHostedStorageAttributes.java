/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.63.0-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DockerHostedStorageAttributes
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-12-11T23:01:25.243+08:00")
public class DockerHostedStorageAttributes {
  @SerializedName("blobStoreName")
  private String blobStoreName = null;

  @SerializedName("strictContentTypeValidation")
  private Boolean strictContentTypeValidation = null;

  /**
   * Controls if deployments of and updates to assets are allowed
   */
  @JsonAdapter(WritePolicyEnum.Adapter.class)
  public enum WritePolicyEnum {
    ALLOW("allow"),
    
    ALLOW_ONCE("allow_once"),
    
    DENY("deny");

    private String value;

    WritePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WritePolicyEnum fromValue(String text) {
      for (WritePolicyEnum b : WritePolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WritePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WritePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WritePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WritePolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("writePolicy")
  private WritePolicyEnum writePolicy = null;

  @SerializedName("latestPolicy")
  private Boolean latestPolicy = null;

  public DockerHostedStorageAttributes blobStoreName(String blobStoreName) {
    this.blobStoreName = blobStoreName;
    return this;
  }

   /**
   * Blob store used to store repository contents
   * @return blobStoreName
  **/
  @ApiModelProperty(example = "default", value = "Blob store used to store repository contents")
  public String getBlobStoreName() {
    return blobStoreName;
  }

  public void setBlobStoreName(String blobStoreName) {
    this.blobStoreName = blobStoreName;
  }

  public DockerHostedStorageAttributes strictContentTypeValidation(Boolean strictContentTypeValidation) {
    this.strictContentTypeValidation = strictContentTypeValidation;
    return this;
  }

   /**
   * Whether to validate uploaded content&#39;s MIME type appropriate for the repository format
   * @return strictContentTypeValidation
  **/
  @ApiModelProperty(example = "true", required = true, value = "Whether to validate uploaded content's MIME type appropriate for the repository format")
  public Boolean isStrictContentTypeValidation() {
    return strictContentTypeValidation;
  }

  public void setStrictContentTypeValidation(Boolean strictContentTypeValidation) {
    this.strictContentTypeValidation = strictContentTypeValidation;
  }

  public DockerHostedStorageAttributes writePolicy(WritePolicyEnum writePolicy) {
    this.writePolicy = writePolicy;
    return this;
  }

   /**
   * Controls if deployments of and updates to assets are allowed
   * @return writePolicy
  **/
  @ApiModelProperty(example = "allow_once", required = true, value = "Controls if deployments of and updates to assets are allowed")
  public WritePolicyEnum getWritePolicy() {
    return writePolicy;
  }

  public void setWritePolicy(WritePolicyEnum writePolicy) {
    this.writePolicy = writePolicy;
  }

  public DockerHostedStorageAttributes latestPolicy(Boolean latestPolicy) {
    this.latestPolicy = latestPolicy;
    return this;
  }

   /**
   * Whether to allow redeploying the &#39;latest&#39; tag but defer to the Deployment Policy for all other tags
   * @return latestPolicy
  **/
  @ApiModelProperty(example = "true", value = "Whether to allow redeploying the 'latest' tag but defer to the Deployment Policy for all other tags")
  public Boolean isLatestPolicy() {
    return latestPolicy;
  }

  public void setLatestPolicy(Boolean latestPolicy) {
    this.latestPolicy = latestPolicy;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerHostedStorageAttributes dockerHostedStorageAttributes = (DockerHostedStorageAttributes) o;
    return Objects.equals(this.blobStoreName, dockerHostedStorageAttributes.blobStoreName) &&
        Objects.equals(this.strictContentTypeValidation, dockerHostedStorageAttributes.strictContentTypeValidation) &&
        Objects.equals(this.writePolicy, dockerHostedStorageAttributes.writePolicy) &&
        Objects.equals(this.latestPolicy, dockerHostedStorageAttributes.latestPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobStoreName, strictContentTypeValidation, writePolicy, latestPolicy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerHostedStorageAttributes {\n");
    
    sb.append("    blobStoreName: ").append(toIndentedString(blobStoreName)).append("\n");
    sb.append("    strictContentTypeValidation: ").append(toIndentedString(strictContentTypeValidation)).append("\n");
    sb.append("    writePolicy: ").append(toIndentedString(writePolicy)).append("\n");
    sb.append("    latestPolicy: ").append(toIndentedString(latestPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

