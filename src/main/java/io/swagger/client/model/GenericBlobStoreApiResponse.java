/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.63.0-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.BlobStoreApiSoftQuota;
import java.io.IOException;

/**
 * GenericBlobStoreApiResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-12-11T23:01:25.243+08:00")
public class GenericBlobStoreApiResponse {
  @SerializedName("softQuota")
  private BlobStoreApiSoftQuota softQuota = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("unavailable")
  private Boolean unavailable = null;

  @SerializedName("blobCount")
  private Long blobCount = null;

  @SerializedName("totalSizeInBytes")
  private Long totalSizeInBytes = null;

  @SerializedName("availableSpaceInBytes")
  private Long availableSpaceInBytes = null;

  public GenericBlobStoreApiResponse softQuota(BlobStoreApiSoftQuota softQuota) {
    this.softQuota = softQuota;
    return this;
  }

   /**
   * Settings to control the soft quota
   * @return softQuota
  **/
  @ApiModelProperty(value = "Settings to control the soft quota")
  public BlobStoreApiSoftQuota getSoftQuota() {
    return softQuota;
  }

  public void setSoftQuota(BlobStoreApiSoftQuota softQuota) {
    this.softQuota = softQuota;
  }

  public GenericBlobStoreApiResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GenericBlobStoreApiResponse type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public GenericBlobStoreApiResponse unavailable(Boolean unavailable) {
    this.unavailable = unavailable;
    return this;
  }

   /**
   * Get unavailable
   * @return unavailable
  **/
  @ApiModelProperty(value = "")
  public Boolean isUnavailable() {
    return unavailable;
  }

  public void setUnavailable(Boolean unavailable) {
    this.unavailable = unavailable;
  }

  public GenericBlobStoreApiResponse blobCount(Long blobCount) {
    this.blobCount = blobCount;
    return this;
  }

   /**
   * Get blobCount
   * @return blobCount
  **/
  @ApiModelProperty(value = "")
  public Long getBlobCount() {
    return blobCount;
  }

  public void setBlobCount(Long blobCount) {
    this.blobCount = blobCount;
  }

  public GenericBlobStoreApiResponse totalSizeInBytes(Long totalSizeInBytes) {
    this.totalSizeInBytes = totalSizeInBytes;
    return this;
  }

   /**
   * Get totalSizeInBytes
   * @return totalSizeInBytes
  **/
  @ApiModelProperty(value = "")
  public Long getTotalSizeInBytes() {
    return totalSizeInBytes;
  }

  public void setTotalSizeInBytes(Long totalSizeInBytes) {
    this.totalSizeInBytes = totalSizeInBytes;
  }

  public GenericBlobStoreApiResponse availableSpaceInBytes(Long availableSpaceInBytes) {
    this.availableSpaceInBytes = availableSpaceInBytes;
    return this;
  }

   /**
   * Get availableSpaceInBytes
   * @return availableSpaceInBytes
  **/
  @ApiModelProperty(value = "")
  public Long getAvailableSpaceInBytes() {
    return availableSpaceInBytes;
  }

  public void setAvailableSpaceInBytes(Long availableSpaceInBytes) {
    this.availableSpaceInBytes = availableSpaceInBytes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericBlobStoreApiResponse genericBlobStoreApiResponse = (GenericBlobStoreApiResponse) o;
    return Objects.equals(this.softQuota, genericBlobStoreApiResponse.softQuota) &&
        Objects.equals(this.name, genericBlobStoreApiResponse.name) &&
        Objects.equals(this.type, genericBlobStoreApiResponse.type) &&
        Objects.equals(this.unavailable, genericBlobStoreApiResponse.unavailable) &&
        Objects.equals(this.blobCount, genericBlobStoreApiResponse.blobCount) &&
        Objects.equals(this.totalSizeInBytes, genericBlobStoreApiResponse.totalSizeInBytes) &&
        Objects.equals(this.availableSpaceInBytes, genericBlobStoreApiResponse.availableSpaceInBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(softQuota, name, type, unavailable, blobCount, totalSizeInBytes, availableSpaceInBytes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericBlobStoreApiResponse {\n");
    
    sb.append("    softQuota: ").append(toIndentedString(softQuota)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unavailable: ").append(toIndentedString(unavailable)).append("\n");
    sb.append("    blobCount: ").append(toIndentedString(blobCount)).append("\n");
    sb.append("    totalSizeInBytes: ").append(toIndentedString(totalSizeInBytes)).append("\n");
    sb.append("    availableSpaceInBytes: ").append(toIndentedString(availableSpaceInBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

