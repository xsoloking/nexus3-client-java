/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.63.0-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ComponentXO;
import java.io.File;
import io.swagger.client.model.PageComponentXO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComponentsApi {
    private ApiClient apiClient;

    public ComponentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComponentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteComponent
     * @param id ID of the component to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteComponentCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/components/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteComponentValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteComponent(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteComponentCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a single component
     * 
     * @param id ID of the component to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComponent(String id) throws ApiException {
        deleteComponentWithHttpInfo(id);
    }

    /**
     * Delete a single component
     * 
     * @param id ID of the component to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteComponentWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteComponentValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a single component (asynchronously)
     * 
     * @param id ID of the component to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteComponentAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteComponentValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getComponentById
     * @param id ID of the component to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/components/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComponentByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getComponentById(Async)");
        }
        

        com.squareup.okhttp.Call call = getComponentByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single component
     * 
     * @param id ID of the component to retrieve (required)
     * @return ComponentXO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentXO getComponentById(String id) throws ApiException {
        ApiResponse<ComponentXO> resp = getComponentByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single component
     * 
     * @param id ID of the component to retrieve (required)
     * @return ApiResponse&lt;ComponentXO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentXO> getComponentByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getComponentByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ComponentXO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single component (asynchronously)
     * 
     * @param id ID of the component to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentByIdAsync(String id, final ApiCallback<ComponentXO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentXO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComponents
     * @param repository Repository from which you would like to retrieve components (required)
     * @param continuationToken A token returned by a prior request. If present, the next page of results are returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentsCall(String repository, String continuationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (continuationToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("continuationToken", continuationToken));
        if (repository != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repository", repository));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComponentsValidateBeforeCall(String repository, String continuationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getComponents(Async)");
        }
        

        com.squareup.okhttp.Call call = getComponentsCall(repository, continuationToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List components
     * 
     * @param repository Repository from which you would like to retrieve components (required)
     * @param continuationToken A token returned by a prior request. If present, the next page of results are returned (optional)
     * @return PageComponentXO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageComponentXO getComponents(String repository, String continuationToken) throws ApiException {
        ApiResponse<PageComponentXO> resp = getComponentsWithHttpInfo(repository, continuationToken);
        return resp.getData();
    }

    /**
     * List components
     * 
     * @param repository Repository from which you would like to retrieve components (required)
     * @param continuationToken A token returned by a prior request. If present, the next page of results are returned (optional)
     * @return ApiResponse&lt;PageComponentXO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageComponentXO> getComponentsWithHttpInfo(String repository, String continuationToken) throws ApiException {
        com.squareup.okhttp.Call call = getComponentsValidateBeforeCall(repository, continuationToken, null, null);
        Type localVarReturnType = new TypeToken<PageComponentXO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List components (asynchronously)
     * 
     * @param repository Repository from which you would like to retrieve components (required)
     * @param continuationToken A token returned by a prior request. If present, the next page of results are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentsAsync(String repository, String continuationToken, final ApiCallback<PageComponentXO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentsValidateBeforeCall(repository, continuationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageComponentXO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadComponent
     * @param repository Name of the repository to which you would like to upload the component (required)
     * @param rAsset r Asset  (optional)
     * @param rAssetPathId r Asset  Package Path (optional)
     * @param pypiAsset pypi Asset  (optional)
     * @param helmAsset helm Asset  (optional)
     * @param yumDirectory yum Directory (optional)
     * @param yumAsset yum Asset  (optional)
     * @param yumAssetFilename yum Asset  Filename (optional)
     * @param dockerAsset docker Asset  (optional)
     * @param rubygemsAsset rubygems Asset  (optional)
     * @param nugetAsset nuget Asset  (optional)
     * @param npmAsset npm Asset  (optional)
     * @param rawDirectory raw Directory (optional)
     * @param rawAsset1 raw Asset 1 (optional)
     * @param rawAsset1Filename raw Asset 1 Filename (optional)
     * @param rawAsset2 raw Asset 2 (optional)
     * @param rawAsset2Filename raw Asset 2 Filename (optional)
     * @param rawAsset3 raw Asset 3 (optional)
     * @param rawAsset3Filename raw Asset 3 Filename (optional)
     * @param aptAsset apt Asset  (optional)
     * @param maven2GroupId maven2 Group ID (optional)
     * @param maven2ArtifactId maven2 Artifact ID (optional)
     * @param maven2Version maven2 Version (optional)
     * @param maven2GeneratePom maven2 Generate a POM file with these coordinates (optional)
     * @param maven2Packaging maven2 Packaging (optional)
     * @param maven2Asset1 maven2 Asset 1 (optional)
     * @param maven2Asset1Classifier maven2 Asset 1 Classifier (optional)
     * @param maven2Asset1Extension maven2 Asset 1 Extension (optional)
     * @param maven2Asset2 maven2 Asset 2 (optional)
     * @param maven2Asset2Classifier maven2 Asset 2 Classifier (optional)
     * @param maven2Asset2Extension maven2 Asset 2 Extension (optional)
     * @param maven2Asset3 maven2 Asset 3 (optional)
     * @param maven2Asset3Classifier maven2 Asset 3 Classifier (optional)
     * @param maven2Asset3Extension maven2 Asset 3 Extension (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadComponentCall(String repository, File rAsset, String rAssetPathId, File pypiAsset, File helmAsset, String yumDirectory, File yumAsset, String yumAssetFilename, File dockerAsset, File rubygemsAsset, File nugetAsset, File npmAsset, String rawDirectory, File rawAsset1, String rawAsset1Filename, File rawAsset2, String rawAsset2Filename, File rawAsset3, String rawAsset3Filename, File aptAsset, String maven2GroupId, String maven2ArtifactId, String maven2Version, Boolean maven2GeneratePom, String maven2Packaging, File maven2Asset1, String maven2Asset1Classifier, String maven2Asset1Extension, File maven2Asset2, String maven2Asset2Classifier, String maven2Asset2Extension, File maven2Asset3, String maven2Asset3Classifier, String maven2Asset3Extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/components";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (repository != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repository", repository));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (rAsset != null)
        localVarFormParams.put("r.asset", rAsset);
        if (rAssetPathId != null)
        localVarFormParams.put("r.asset.pathId", rAssetPathId);
        if (pypiAsset != null)
        localVarFormParams.put("pypi.asset", pypiAsset);
        if (helmAsset != null)
        localVarFormParams.put("helm.asset", helmAsset);
        if (yumDirectory != null)
        localVarFormParams.put("yum.directory", yumDirectory);
        if (yumAsset != null)
        localVarFormParams.put("yum.asset", yumAsset);
        if (yumAssetFilename != null)
        localVarFormParams.put("yum.asset.filename", yumAssetFilename);
        if (dockerAsset != null)
        localVarFormParams.put("docker.asset", dockerAsset);
        if (rubygemsAsset != null)
        localVarFormParams.put("rubygems.asset", rubygemsAsset);
        if (nugetAsset != null)
        localVarFormParams.put("nuget.asset", nugetAsset);
        if (npmAsset != null)
        localVarFormParams.put("npm.asset", npmAsset);
        if (rawDirectory != null)
        localVarFormParams.put("raw.directory", rawDirectory);
        if (rawAsset1 != null)
        localVarFormParams.put("raw.asset1", rawAsset1);
        if (rawAsset1Filename != null)
        localVarFormParams.put("raw.asset1.filename", rawAsset1Filename);
        if (rawAsset2 != null)
        localVarFormParams.put("raw.asset2", rawAsset2);
        if (rawAsset2Filename != null)
        localVarFormParams.put("raw.asset2.filename", rawAsset2Filename);
        if (rawAsset3 != null)
        localVarFormParams.put("raw.asset3", rawAsset3);
        if (rawAsset3Filename != null)
        localVarFormParams.put("raw.asset3.filename", rawAsset3Filename);
        if (aptAsset != null)
        localVarFormParams.put("apt.asset", aptAsset);
        if (maven2GroupId != null)
        localVarFormParams.put("maven2.groupId", maven2GroupId);
        if (maven2ArtifactId != null)
        localVarFormParams.put("maven2.artifactId", maven2ArtifactId);
        if (maven2Version != null)
        localVarFormParams.put("maven2.version", maven2Version);
        if (maven2GeneratePom != null)
        localVarFormParams.put("maven2.generate-pom", maven2GeneratePom);
        if (maven2Packaging != null)
        localVarFormParams.put("maven2.packaging", maven2Packaging);
        if (maven2Asset1 != null)
        localVarFormParams.put("maven2.asset1", maven2Asset1);
        if (maven2Asset1Classifier != null)
        localVarFormParams.put("maven2.asset1.classifier", maven2Asset1Classifier);
        if (maven2Asset1Extension != null)
        localVarFormParams.put("maven2.asset1.extension", maven2Asset1Extension);
        if (maven2Asset2 != null)
        localVarFormParams.put("maven2.asset2", maven2Asset2);
        if (maven2Asset2Classifier != null)
        localVarFormParams.put("maven2.asset2.classifier", maven2Asset2Classifier);
        if (maven2Asset2Extension != null)
        localVarFormParams.put("maven2.asset2.extension", maven2Asset2Extension);
        if (maven2Asset3 != null)
        localVarFormParams.put("maven2.asset3", maven2Asset3);
        if (maven2Asset3Classifier != null)
        localVarFormParams.put("maven2.asset3.classifier", maven2Asset3Classifier);
        if (maven2Asset3Extension != null)
        localVarFormParams.put("maven2.asset3.extension", maven2Asset3Extension);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadComponentValidateBeforeCall(String repository, File rAsset, String rAssetPathId, File pypiAsset, File helmAsset, String yumDirectory, File yumAsset, String yumAssetFilename, File dockerAsset, File rubygemsAsset, File nugetAsset, File npmAsset, String rawDirectory, File rawAsset1, String rawAsset1Filename, File rawAsset2, String rawAsset2Filename, File rawAsset3, String rawAsset3Filename, File aptAsset, String maven2GroupId, String maven2ArtifactId, String maven2Version, Boolean maven2GeneratePom, String maven2Packaging, File maven2Asset1, String maven2Asset1Classifier, String maven2Asset1Extension, File maven2Asset2, String maven2Asset2Classifier, String maven2Asset2Extension, File maven2Asset3, String maven2Asset3Classifier, String maven2Asset3Extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling uploadComponent(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadComponentCall(repository, rAsset, rAssetPathId, pypiAsset, helmAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, aptAsset, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a single component
     * 
     * @param repository Name of the repository to which you would like to upload the component (required)
     * @param rAsset r Asset  (optional)
     * @param rAssetPathId r Asset  Package Path (optional)
     * @param pypiAsset pypi Asset  (optional)
     * @param helmAsset helm Asset  (optional)
     * @param yumDirectory yum Directory (optional)
     * @param yumAsset yum Asset  (optional)
     * @param yumAssetFilename yum Asset  Filename (optional)
     * @param dockerAsset docker Asset  (optional)
     * @param rubygemsAsset rubygems Asset  (optional)
     * @param nugetAsset nuget Asset  (optional)
     * @param npmAsset npm Asset  (optional)
     * @param rawDirectory raw Directory (optional)
     * @param rawAsset1 raw Asset 1 (optional)
     * @param rawAsset1Filename raw Asset 1 Filename (optional)
     * @param rawAsset2 raw Asset 2 (optional)
     * @param rawAsset2Filename raw Asset 2 Filename (optional)
     * @param rawAsset3 raw Asset 3 (optional)
     * @param rawAsset3Filename raw Asset 3 Filename (optional)
     * @param aptAsset apt Asset  (optional)
     * @param maven2GroupId maven2 Group ID (optional)
     * @param maven2ArtifactId maven2 Artifact ID (optional)
     * @param maven2Version maven2 Version (optional)
     * @param maven2GeneratePom maven2 Generate a POM file with these coordinates (optional)
     * @param maven2Packaging maven2 Packaging (optional)
     * @param maven2Asset1 maven2 Asset 1 (optional)
     * @param maven2Asset1Classifier maven2 Asset 1 Classifier (optional)
     * @param maven2Asset1Extension maven2 Asset 1 Extension (optional)
     * @param maven2Asset2 maven2 Asset 2 (optional)
     * @param maven2Asset2Classifier maven2 Asset 2 Classifier (optional)
     * @param maven2Asset2Extension maven2 Asset 2 Extension (optional)
     * @param maven2Asset3 maven2 Asset 3 (optional)
     * @param maven2Asset3Classifier maven2 Asset 3 Classifier (optional)
     * @param maven2Asset3Extension maven2 Asset 3 Extension (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadComponent(String repository, File rAsset, String rAssetPathId, File pypiAsset, File helmAsset, String yumDirectory, File yumAsset, String yumAssetFilename, File dockerAsset, File rubygemsAsset, File nugetAsset, File npmAsset, String rawDirectory, File rawAsset1, String rawAsset1Filename, File rawAsset2, String rawAsset2Filename, File rawAsset3, String rawAsset3Filename, File aptAsset, String maven2GroupId, String maven2ArtifactId, String maven2Version, Boolean maven2GeneratePom, String maven2Packaging, File maven2Asset1, String maven2Asset1Classifier, String maven2Asset1Extension, File maven2Asset2, String maven2Asset2Classifier, String maven2Asset2Extension, File maven2Asset3, String maven2Asset3Classifier, String maven2Asset3Extension) throws ApiException {
        uploadComponentWithHttpInfo(repository, rAsset, rAssetPathId, pypiAsset, helmAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, aptAsset, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension);
    }

    /**
     * Upload a single component
     * 
     * @param repository Name of the repository to which you would like to upload the component (required)
     * @param rAsset r Asset  (optional)
     * @param rAssetPathId r Asset  Package Path (optional)
     * @param pypiAsset pypi Asset  (optional)
     * @param helmAsset helm Asset  (optional)
     * @param yumDirectory yum Directory (optional)
     * @param yumAsset yum Asset  (optional)
     * @param yumAssetFilename yum Asset  Filename (optional)
     * @param dockerAsset docker Asset  (optional)
     * @param rubygemsAsset rubygems Asset  (optional)
     * @param nugetAsset nuget Asset  (optional)
     * @param npmAsset npm Asset  (optional)
     * @param rawDirectory raw Directory (optional)
     * @param rawAsset1 raw Asset 1 (optional)
     * @param rawAsset1Filename raw Asset 1 Filename (optional)
     * @param rawAsset2 raw Asset 2 (optional)
     * @param rawAsset2Filename raw Asset 2 Filename (optional)
     * @param rawAsset3 raw Asset 3 (optional)
     * @param rawAsset3Filename raw Asset 3 Filename (optional)
     * @param aptAsset apt Asset  (optional)
     * @param maven2GroupId maven2 Group ID (optional)
     * @param maven2ArtifactId maven2 Artifact ID (optional)
     * @param maven2Version maven2 Version (optional)
     * @param maven2GeneratePom maven2 Generate a POM file with these coordinates (optional)
     * @param maven2Packaging maven2 Packaging (optional)
     * @param maven2Asset1 maven2 Asset 1 (optional)
     * @param maven2Asset1Classifier maven2 Asset 1 Classifier (optional)
     * @param maven2Asset1Extension maven2 Asset 1 Extension (optional)
     * @param maven2Asset2 maven2 Asset 2 (optional)
     * @param maven2Asset2Classifier maven2 Asset 2 Classifier (optional)
     * @param maven2Asset2Extension maven2 Asset 2 Extension (optional)
     * @param maven2Asset3 maven2 Asset 3 (optional)
     * @param maven2Asset3Classifier maven2 Asset 3 Classifier (optional)
     * @param maven2Asset3Extension maven2 Asset 3 Extension (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadComponentWithHttpInfo(String repository, File rAsset, String rAssetPathId, File pypiAsset, File helmAsset, String yumDirectory, File yumAsset, String yumAssetFilename, File dockerAsset, File rubygemsAsset, File nugetAsset, File npmAsset, String rawDirectory, File rawAsset1, String rawAsset1Filename, File rawAsset2, String rawAsset2Filename, File rawAsset3, String rawAsset3Filename, File aptAsset, String maven2GroupId, String maven2ArtifactId, String maven2Version, Boolean maven2GeneratePom, String maven2Packaging, File maven2Asset1, String maven2Asset1Classifier, String maven2Asset1Extension, File maven2Asset2, String maven2Asset2Classifier, String maven2Asset2Extension, File maven2Asset3, String maven2Asset3Classifier, String maven2Asset3Extension) throws ApiException {
        com.squareup.okhttp.Call call = uploadComponentValidateBeforeCall(repository, rAsset, rAssetPathId, pypiAsset, helmAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, aptAsset, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a single component (asynchronously)
     * 
     * @param repository Name of the repository to which you would like to upload the component (required)
     * @param rAsset r Asset  (optional)
     * @param rAssetPathId r Asset  Package Path (optional)
     * @param pypiAsset pypi Asset  (optional)
     * @param helmAsset helm Asset  (optional)
     * @param yumDirectory yum Directory (optional)
     * @param yumAsset yum Asset  (optional)
     * @param yumAssetFilename yum Asset  Filename (optional)
     * @param dockerAsset docker Asset  (optional)
     * @param rubygemsAsset rubygems Asset  (optional)
     * @param nugetAsset nuget Asset  (optional)
     * @param npmAsset npm Asset  (optional)
     * @param rawDirectory raw Directory (optional)
     * @param rawAsset1 raw Asset 1 (optional)
     * @param rawAsset1Filename raw Asset 1 Filename (optional)
     * @param rawAsset2 raw Asset 2 (optional)
     * @param rawAsset2Filename raw Asset 2 Filename (optional)
     * @param rawAsset3 raw Asset 3 (optional)
     * @param rawAsset3Filename raw Asset 3 Filename (optional)
     * @param aptAsset apt Asset  (optional)
     * @param maven2GroupId maven2 Group ID (optional)
     * @param maven2ArtifactId maven2 Artifact ID (optional)
     * @param maven2Version maven2 Version (optional)
     * @param maven2GeneratePom maven2 Generate a POM file with these coordinates (optional)
     * @param maven2Packaging maven2 Packaging (optional)
     * @param maven2Asset1 maven2 Asset 1 (optional)
     * @param maven2Asset1Classifier maven2 Asset 1 Classifier (optional)
     * @param maven2Asset1Extension maven2 Asset 1 Extension (optional)
     * @param maven2Asset2 maven2 Asset 2 (optional)
     * @param maven2Asset2Classifier maven2 Asset 2 Classifier (optional)
     * @param maven2Asset2Extension maven2 Asset 2 Extension (optional)
     * @param maven2Asset3 maven2 Asset 3 (optional)
     * @param maven2Asset3Classifier maven2 Asset 3 Classifier (optional)
     * @param maven2Asset3Extension maven2 Asset 3 Extension (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadComponentAsync(String repository, File rAsset, String rAssetPathId, File pypiAsset, File helmAsset, String yumDirectory, File yumAsset, String yumAssetFilename, File dockerAsset, File rubygemsAsset, File nugetAsset, File npmAsset, String rawDirectory, File rawAsset1, String rawAsset1Filename, File rawAsset2, String rawAsset2Filename, File rawAsset3, String rawAsset3Filename, File aptAsset, String maven2GroupId, String maven2ArtifactId, String maven2Version, Boolean maven2GeneratePom, String maven2Packaging, File maven2Asset1, String maven2Asset1Classifier, String maven2Asset1Extension, File maven2Asset2, String maven2Asset2Classifier, String maven2Asset2Extension, File maven2Asset3, String maven2Asset3Classifier, String maven2Asset3Extension, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadComponentValidateBeforeCall(repository, rAsset, rAssetPathId, pypiAsset, helmAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, aptAsset, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
